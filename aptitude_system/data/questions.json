{
  "technical_questions": [
    {
      "id": "java_mc_basic_05",
      "category": "Java",
      "type": "객관식",
      "difficulty": "초급",
      "question": "Java에서 반복문이 아닌 것은 무엇인가요?",
      "points": 10,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "for",
        "while",
        "do-while",
        "switch"
      ],
      "correct_answer": "switch"
    },
    {
      "id": "db_mc_basic_01",
      "category": "Database",
      "type": "객관식",
      "difficulty": "초급",
      "question": "SQL에서 데이터를 조회할 때 사용하는 명령어는?",
      "points": 10,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "SELECT",
        "INSERT",
        "UPDATE",
        "DELETE"
      ],
      "correct_answer": "SELECT"
    },
    {
      "id": "db_mc_basic_02",
      "category": "Database",
      "type": "객관식",
      "difficulty": "초급",
      "question": "SQL에서 조건을 지정할 때 사용하는 절은?",
      "points": 10,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "WHERE",
        "FROM",
        "SELECT",
        "ORDER BY"
      ],
      "correct_answer": "WHERE"
    },
    {
      "id": "db_mc_basic_03",
      "category": "Database",
      "type": "객관식",
      "difficulty": "초급",
      "question": "SQL에서 결과를 정렬할 때 사용하는 절은?",
      "points": 10,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "ORDER BY",
        "GROUP BY",
        "WHERE",
        "HAVING"
      ],
      "correct_answer": "ORDER BY"
    },
    {
      "id": "db_mc_basic_04",
      "category": "Database",
      "type": "객관식",
      "difficulty": "초급",
      "question": "SQL에서 집계 함수가 아닌 것은?",
      "points": 10,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "COUNT",
        "SUM",
        "AVG",
        "SELECT"
      ],
      "correct_answer": "SELECT"
    },
    {
      "id": "db_mc_basic_05",
      "category": "Database",
      "type": "객관식",
      "difficulty": "초급",
      "question": "SQL에서 중복된 데이터를 제거할 때 사용하는 키워드는?",
      "points": 10,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "DISTINCT",
        "UNIQUE",
        "DIFFERENT",
        "SINGLE"
      ],
      "correct_answer": "DISTINCT"
    },
    {
      "id": "db_mc_inter_03",
      "category": "Database",
      "type": "객관식",
      "difficulty": "중급",
      "question": "SQL에서 인덱스의 주요 목적은?",
      "points": 10,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "검색 속도 향상",
        "저장 공간 절약",
        "데이터 무결성",
        "백업 용이성"
      ],
      "correct_answer": "검색 속도 향상"
    },
    {
      "id": "java_mc_inter_01",
      "category": "Java",
      "type": "객관식",
      "difficulty": "중급",
      "question": "Java에서 예외(Exception)를 처리하는 키워드는?",
      "points": 10,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "try",
        "catch",
        "throw",
        "final"
      ],
      "correct_answer": "try"
    },
    {
      "id": "sdk_mc_01",
      "category": "Mobile",
      "type": "객관식",
      "difficulty": "중급",
      "question": "모바일 애플리케이션 라이브러리(SDK)를 개발할 때, 일반 앱 개발 대비 특수하게 고려할 사항이 아닌 것은?",
      "points": 10,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "연동될 앱과의 잠재적 충돌을 피하기 위한 리소스 격리(Resource Isolation)",
        "다른 개발자가 사용하기 쉬운 API 설계 및 명확한 문서화",
        "SDK 자체의 용량(Binary Size)을 최소화하여 호스트 앱에 부담을 줄이는 것",
        "앱 마켓의 정책 변경에 따른 앱의 UI/UX 디자인 최신화"
      ],
      "correct_answer": "앱 마켓의 정책 변경에 따른 앱의 UI/UX 디자인 최신화"
    },
    {
      "id": "flutter_getx_01",
      "category": "Flutter",
      "type": "객관식",
      "difficulty": "중급",
      "question": "Flutter의 상태관리 라이브러리 GetX의 특징에 대한 설명으로 올바르지 않은 것은?",
      "points": 10,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "BuildContext에 대한 의존성이 낮아 코드의 복잡도를 줄일 수 있다.",
        "Google의 Flutter 팀이 공식적으로 개발하고 관리하는 핵심 라이브러리다.",
        "상태관리, 라우팅, 의존성 주입 등 다양한 기능을 통합적으로 제공한다.",
        "적은 양의 상용구 코드(Boilerplate)로 높은 개발 생산성을 목표로 한다."
      ],
      "correct_answer": "Google의 Flutter 팀이 공식적으로 개발하고 관리하는 핵심 라이브러리다."
    },
    {
      "id": "streaming_latency_01",
      "category": "Streaming",
      "type": "객관식",
      "difficulty": "중급",
      "question": "실시간 영상/음성 스트리밍 서비스에서 지연 시간(Latency)이 증가하는 현상의 주된 기술적 원인으로 가장 가능성이 높은 것은?",
      "points": 10,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "네트워크 대역폭 변화에 대응하는 동적 버퍼링(Dynamic Buffering) 및 코덱 비트레이트(Codec Bitrate) 조정 실패",
        "UI 스레드에서 과도한 그래픽 렌더링이 발생하여 화면이 멈추는 현상(ANR)",
        "서버의 스트리밍 세션 만료 시간이 짧게 설정되어 연결이 자주 끊어지는 경우",
        "단말기의 오디오 하드웨어 드라이버와 앱의 비호환성 문제"
      ],
      "correct_answer": "네트워크 대역폭 변화에 대응하는 동적 버퍼링(Dynamic Buffering) 및 코덱 비트레이트(Codec Bitrate) 조정 실패"
    },
    {
      "id": "code_duplication_01",
      "category": "Software Engineering",
      "type": "객관식",
      "difficulty": "중급",
      "question": "기존 코드와 유사한 신규 기능을 개발할 때 코드 중복이 발생할 경우, 유지보수성을 높이기 위한 가장 이상적인 설계 원칙은?",
      "points": 10,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "시간 제약이 있다면, // TODO: Refactor 주석을 남기고 코드를 복사하여 사용한다.",
        "각 기능의 미세한 차이점을 상세히 주석으로 작성하고 두 개의 버전을 모두 유지한다.",
        "공통 로직을 별도의 함수나 클래스로 추출(Extract)하여 양쪽에서 재사용하도록 리팩토링한다.",
        "최신 요구사항을 반영한 새 코드가 더 우수하므로 기존 코드를 완전히 대체한다."
      ],
      "correct_answer": "공통 로직을 별도의 함수나 클래스로 추출(Extract)하여 양쪽에서 재사용하도록 리팩토링한다."
    },
    {
      "id": "db_mc_groupby_having_01",
      "category": "Database",
      "type": "객관식",
      "difficulty": "중급",
      "question": "employees 테이블에서 각 부서(department_id)별 평균 급여를 계산하고, 그 평균 급여가 $8,000를 초과하는 부서의 정보만 조회하려고 합니다.<br><br>아래 쿼리의 빈칸 ①, ②에 들어갈 키워드로 가장 적절한 것은 무엇일까요?<br><br><pre>SELECT\n    department_id,\n    AVG(salary) AS avg_salary\nFROM\n    employees\n[ ① ]\n    department_id\n[ ② ]\n    AVG(salary) > 8000;</pre>",
      "points": 10,
      "department_ids": [
        "dept_card"
      ],
      "options": [
        "WHERE, HAVING",
        "GROUP BY, WHERE",
        "GROUP BY, HAVING",
        "WHERE, GROUP BY"
      ],
      "correct_answer": "GROUP BY, HAVING"
    }
  ],
  "problem_solving_questions": []
}