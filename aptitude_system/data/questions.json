{
  "technical_questions": [
    {
      "id": "java_mc_basic_01",
      "category": "Java",
      "type": "객관식",
      "difficulty": "초급",
      "question": "Java에서 프로그램의 시작점이 되는 메서드는 무엇인가요?",
      "points": 10,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "main",
        "start",
        "run",
        "execute"
      ],
      "correct_answer": "main"
    },
    {
      "id": "java_mc_basic_02",
      "category": "Java",
      "type": "객관식",
      "difficulty": "초급",
      "question": "Java에서 정수를 저장하는 기본 자료형은 무엇인가요?",
      "points": 12,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "int",
        "float",
        "char",
        "String"
      ],
      "correct_answer": "int"
    },
    {
      "id": "java_mc_basic_03",
      "category": "Java",
      "type": "객관식",
      "difficulty": "초급",
      "question": "Java에서 한 줄 주석을 작성할 때 사용하는 기호는?",
      "points": 8,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "//",
        "/* */",
        "#",
        "<!-- -->"
      ],
      "correct_answer": "//"
    },
    {
      "id": "java_mc_basic_04",
      "category": "Java",
      "type": "객관식",
      "difficulty": "초급",
      "question": "Java에서 문자열을 저장하는 클래스는 무엇인가요?",
      "points": 11,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "String",
        "str",
        "char",
        "Text"
      ],
      "correct_answer": "String"
    },
    {
      "id": "java_mc_basic_05",
      "category": "Java",
      "type": "객관식",
      "difficulty": "초급",
      "question": "Java에서 반복문이 아닌 것은 무엇인가요?",
      "points": 9,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "for",
        "while",
        "do-while",
        "switch"
      ],
      "correct_answer": "switch"
    },
    {
      "id": "java_mc_basic_06",
      "category": "Java",
      "type": "객관식",
      "difficulty": "초급",
      "question": "Java에서 조건문을 작성할 때 사용하는 키워드는?",
      "points": 10,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "if",
        "for",
        "case",
        "loop"
      ],
      "correct_answer": "if"
    },
    {
      "id": "java_mc_basic_07",
      "category": "Java",
      "type": "객관식",
      "difficulty": "초급",
      "question": "Java에서 배열의 길이를 구할 때 사용하는 속성은?",
      "points": 11,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "length",
        "size",
        "count",
        "getLength"
      ],
      "correct_answer": "length"
    },
    {
      "id": "java_mc_basic_08",
      "category": "Java",
      "type": "객관식",
      "difficulty": "초급",
      "question": "Java에서 콘솔에 출력할 때 사용하는 메서드는?",
      "points": 12,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "System.out.println",
        "print",
        "echo",
        "write"
      ],
      "correct_answer": "System.out.println"
    },
    {
      "id": "java_mc_basic_09",
      "category": "Java",
      "type": "객관식",
      "difficulty": "초급",
      "question": "Java에서 참/거짓을 저장하는 자료형은?",
      "points": 9,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "boolean",
        "int",
        "char",
        "float"
      ],
      "correct_answer": "boolean"
    },
    {
      "id": "java_mc_basic_10",
      "category": "Java",
      "type": "객관식",
      "difficulty": "초급",
      "question": "Java에서 클래스를 정의할 때 사용하는 키워드는?",
      "points": 10,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "class",
        "define",
        "struct",
        "object"
      ],
      "correct_answer": "class"
    },
    {
      "id": "java_mc_basic_11",
      "category": "Java",
      "type": "객관식",
      "difficulty": "초급",
      "question": "Java에서 소수점을 포함한 숫자를 저장하는 자료형은?",
      "points": 11,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "double",
        "int",
        "char",
        "boolean"
      ],
      "correct_answer": "double"
    },
    {
      "id": "java_mc_basic_12",
      "category": "Java",
      "type": "객관식",
      "difficulty": "초급",
      "question": "Java에서 변수를 선언할 때 사용하는 키워드는?",
      "points": 9,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "var",
        "let",
        "const",
        "variable"
      ],
      "correct_answer": "var"
    },
    {
      "id": "java_mc_basic_13",
      "category": "Java",
      "type": "객관식",
      "difficulty": "초급",
      "question": "Java에서 메서드를 정의할 때 사용하는 키워드는?",
      "points": 12,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "method",
        "function",
        "def",
        "public"
      ],
      "correct_answer": "public"
    },
    {
      "id": "java_mc_basic_14",
      "category": "Java",
      "type": "객관식",
      "difficulty": "초급",
      "question": "Java에서 상수를 선언할 때 사용하는 키워드는?",
      "points": 10,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "const",
        "final",
        "static",
        "constant"
      ],
      "correct_answer": "final"
    },
    {
      "id": "java_mc_basic_15",
      "category": "Java",
      "type": "객관식",
      "difficulty": "초급",
      "question": "Java에서 문자열을 연결할 때 사용하는 연산자는?",
      "points": 8,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "+",
        "&",
        ".",
        "concat"
      ],
      "correct_answer": "+"
    },
    {
      "id": "java_mc_basic_16",
      "category": "Java",
      "type": "객관식",
      "difficulty": "초급",
      "question": "Java에서 객체를 생성할 때 사용하는 키워드는?",
      "points": 11,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "new",
        "create",
        "make",
        "instance"
      ],
      "correct_answer": "new"
    },
    {
      "id": "java_mc_basic_17",
      "category": "Java",
      "type": "객관식",
      "difficulty": "초급",
      "question": "Java에서 배열을 선언할 때 사용하는 기호는?",
      "points": 9,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "[]",
        "{}",
        "()",
        "<>"
      ],
      "correct_answer": "[]"
    },
    {
      "id": "java_mc_basic_18",
      "category": "Java",
      "type": "객관식",
      "difficulty": "초급",
      "question": "Java에서 null 값은 어떤 의미인가요?",
      "points": 10,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "0",
        "빈 문자열",
        "참조가 없음",
        "false"
      ],
      "correct_answer": "참조가 없음"
    },
    {
      "id": "java_mc_basic_19",
      "category": "Java",
      "type": "객관식",
      "difficulty": "초급",
      "question": "Java에서 패키지를 선언할 때 사용하는 키워드는?",
      "points": 12,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "package",
        "import",
        "namespace",
        "module"
      ],
      "correct_answer": "package"
    },
    {
      "id": "java_mc_basic_20",
      "category": "Java",
      "type": "객관식",
      "difficulty": "초급",
      "question": "Java에서 다른 패키지의 클래스를 사용할 때 사용하는 키워드는?",
      "points": 11,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "import",
        "include",
        "using",
        "require"
      ],
      "correct_answer": "import"
    },
    {
      "id": "java_mc_inter_01",
      "category": "Java",
      "type": "객관식",
      "difficulty": "중급",
      "question": "Java에서 인터페이스와 추상 클래스의 차이점은?",
      "points": 15,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "인터페이스는 다중 상속 불가",
        "추상 클래스는 구현 메서드 불가",
        "인터페이스는 필드 선언 불가",
        "추상 클래스는 생성자 불가"
      ],
      "correct_answer": "인터페이스는 필드 선언 불가"
    },
    {
      "id": "java_mc_inter_02",
      "category": "Java",
      "type": "객관식",
      "difficulty": "중급",
      "question": "Java에서 제네릭을 사용하는 이유는?",
      "points": 14,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "타입 안전성",
        "메모리 절약",
        "속도 향상",
        "코드 간소화"
      ],
      "correct_answer": "타입 안전성"
    },
    {
      "id": "java_mc_inter_03",
      "category": "Java",
      "type": "객관식",
      "difficulty": "중급",
      "question": "Java에서 synchronized 키워드의 역할은?",
      "points": 16,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "메모리 최적화",
        "스레드 동기화",
        "가비지 컬렉션",
        "예외 처리"
      ],
      "correct_answer": "스레드 동기화"
    },
    {
      "id": "java_mc_inter_04",
      "category": "Java",
      "type": "객관식",
      "difficulty": "중급",
      "question": "Java에서 try-with-resources 문의 장점은?",
      "points": 13,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "자동 리소스 해제",
        "예외 처리 개선",
        "메모리 사용량 감소",
        "코드 실행 속도 향상"
      ],
      "correct_answer": "자동 리소스 해제"
    },
    {
      "id": "java_mc_inter_05",
      "category": "Java",
      "type": "객관식",
      "difficulty": "중급",
      "question": "Java에서 Stream API의 주요 특징은?",
      "points": 15,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "함수형 프로그래밍",
        "객체지향 프로그래밍",
        "절차적 프로그래밍",
        "로직 프로그래밍"
      ],
      "correct_answer": "함수형 프로그래밍"
    },
    {
      "id": "java_mc_inter_06",
      "category": "Java",
      "type": "객관식",
      "difficulty": "중급",
      "question": "Java에서 Optional 클래스의 목적은?",
      "points": 14,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "null 참조 방지",
        "메모리 최적화",
        "타입 변환",
        "예외 처리"
      ],
      "correct_answer": "null 참조 방지"
    },
    {
      "id": "java_mc_inter_07",
      "category": "Java",
      "type": "객관식",
      "difficulty": "중급",
      "question": "Java에서 람다 표현식의 장점은?",
      "points": 12,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "코드 간소화",
        "메모리 절약",
        "실행 속도 향상",
        "타입 안전성"
      ],
      "correct_answer": "코드 간소화"
    },
    {
      "id": "java_mc_inter_08",
      "category": "Java",
      "type": "객관식",
      "difficulty": "중급",
      "question": "Java에서 컬렉션 프레임워크의 핵심 인터페이스는?",
      "points": 13,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "Collection",
        "Object",
        "Array",
        "List"
      ],
      "correct_answer": "Collection"
    },
    {
      "id": "java_mc_inter_09",
      "category": "Java",
      "type": "객관식",
      "difficulty": "중급",
      "question": "Java에서 equals()와 hashCode() 메서드의 관계는?",
      "points": 15,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "equals가 같으면 hashCode도 같아야 함",
        "hashCode가 같으면 equals도 같아야 함",
        "서로 독립적",
        "상속 관계"
      ],
      "correct_answer": "equals가 같으면 hashCode도 같아야 함"
    },
    {
      "id": "java_mc_inter_10",
      "category": "Java",
      "type": "객관식",
      "difficulty": "중급",
      "question": "Java에서 final 키워드가 클래스에 적용될 때의 의미는?",
      "points": 14,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "상속 불가",
        "수정 불가",
        "생성 불가",
        "접근 불가"
      ],
      "correct_answer": "상속 불가"
    },
    {
      "id": "java_mc_inter_11",
      "category": "Java",
      "type": "객관식",
      "difficulty": "중급",
      "question": "Java에서 volatile 키워드의 역할은?",
      "points": 15,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "메모리 가시성 보장",
        "스레드 동기화",
        "가비지 컬렉션",
        "예외 처리"
      ],
      "correct_answer": "메모리 가시성 보장"
    },
    {
      "id": "java_mc_inter_12",
      "category": "Java",
      "type": "객관식",
      "difficulty": "중급",
      "question": "Java에서 transient 키워드의 의미는?",
      "points": 13,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "직렬화 제외",
        "상속 제외",
        "접근 제한",
        "메모리 해제"
      ],
      "correct_answer": "직렬화 제외"
    },
    {
      "id": "java_mc_inter_13",
      "category": "Java",
      "type": "객관식",
      "difficulty": "중급",
      "question": "Java에서 static 블록의 실행 시점은?",
      "points": 14,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "클래스 로딩 시",
        "객체 생성 시",
        "메서드 호출 시",
        "프로그램 종료 시"
      ],
      "correct_answer": "클래스 로딩 시"
    },
    {
      "id": "java_mc_inter_14",
      "category": "Java",
      "type": "객관식",
      "difficulty": "중급",
      "question": "Java에서 내부 클래스(Inner Class)의 장점은?",
      "points": 12,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "캡슐화 강화",
        "메모리 절약",
        "실행 속도 향상",
        "코드 간소화"
      ],
      "correct_answer": "캡슐화 강화"
    },
    {
      "id": "java_mc_inter_15",
      "category": "Java",
      "type": "객관식",
      "difficulty": "중급",
      "question": "Java에서 enum의 특징은?",
      "points": 15,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "타입 안전성",
        "메모리 효율성",
        "실행 속도",
        "코드 간소화"
      ],
      "correct_answer": "타입 안전성"
    },
    {
      "id": "java_mc_inter_16",
      "category": "Java",
      "type": "객관식",
      "difficulty": "중급",
      "question": "Java에서 애노테이션(Annotation)의 역할은?",
      "points": 13,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "메타데이터 제공",
        "코드 실행",
        "메모리 관리",
        "예외 처리"
      ],
      "correct_answer": "메타데이터 제공"
    },
    {
      "id": "java_mc_inter_17",
      "category": "Java",
      "type": "객관식",
      "difficulty": "중급",
      "question": "Java에서 리플렉션(Reflection)의 용도는?",
      "points": 16,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "런타임 클래스 정보 접근",
        "컴파일 타임 최적화",
        "메모리 관리",
        "가비지 컬렉션"
      ],
      "correct_answer": "런타임 클래스 정보 접근"
    },
    {
      "id": "java_mc_inter_18",
      "category": "Java",
      "type": "객관식",
      "difficulty": "중급",
      "question": "Java에서 제네릭 와일드카드(?)의 의미는?",
      "points": 14,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "모든 타입 허용",
        "특정 타입만 허용",
        "타입 제한",
        "타입 변환"
      ],
      "correct_answer": "모든 타입 허용"
    },
    {
      "id": "java_mc_inter_19",
      "category": "Java",
      "type": "객관식",
      "difficulty": "중급",
      "question": "Java에서 ConcurrentHashMap의 특징은?",
      "points": 15,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "스레드 안전",
        "메모리 효율성",
        "실행 속도",
        "타입 안전성"
      ],
      "correct_answer": "스레드 안전"
    },
    {
      "id": "java_mc_inter_20",
      "category": "Java",
      "type": "객관식",
      "difficulty": "중급",
      "question": "Java에서 CompletableFuture의 장점은?",
      "points": 14,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "비동기 처리",
        "메모리 절약",
        "코드 간소화",
        "타입 안전성"
      ],
      "correct_answer": "비동기 처리"
    },
    {
      "id": "java_sa_basic_01",
      "category": "Java",
      "type": "주관식",
      "difficulty": "초급",
      "question": "Java에서 'Hello World'를 출력하는 코드를 작성하세요.",
      "points": 15,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "System.out.println(\"Hello World\");",
      "keywords": [
        "System.out.println",
        "Hello World"
      ]
    },
    {
      "id": "java_sa_basic_02",
      "category": "Java",
      "type": "주관식",
      "difficulty": "초급",
      "question": "Java에서 정수형 변수 age를 선언하고 값 25를 할당하는 코드를 작성하세요.",
      "points": 12,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "int age = 25;",
      "keywords": [
        "int",
        "age",
        "25"
      ]
    },
    {
      "id": "java_sa_basic_03",
      "category": "Java",
      "type": "주관식",
      "difficulty": "초급",
      "question": "Java에서 문자열 변수 name을 선언하고 '홍길동'을 할당하는 코드를 작성하세요.",
      "points": 13,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "String name = \"홍길동\";",
      "keywords": [
        "String",
        "name",
        "홍길동"
      ]
    },
    {
      "id": "java_sa_basic_04",
      "category": "Java",
      "type": "주관식",
      "difficulty": "초급",
      "question": "Java에서 if문을 사용하여 변수 score가 80 이상이면 '합격'을 출력하는 코드를 작성하세요.",
      "points": 16,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "if (score >= 80) { System.out.println(\"합격\"); }",
      "keywords": [
        "if",
        "score",
        ">=",
        "80",
        "System.out.println",
        "합격"
      ]
    },
    {
      "id": "java_sa_basic_05",
      "category": "Java",
      "type": "주관식",
      "difficulty": "초급",
      "question": "Java에서 for문을 사용하여 1부터 5까지 출력하는 코드를 작성하세요.",
      "points": 14,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "for (int i = 1; i <= 5; i++) { System.out.println(i); }",
      "keywords": [
        "for",
        "int",
        "i",
        "1",
        "5",
        "System.out.println"
      ]
    },
    {
      "id": "java_sa_basic_06",
      "category": "Java",
      "type": "주관식",
      "difficulty": "초급",
      "question": "Java에서 배열 numbers를 선언하고 값 1, 2, 3을 할당하는 코드를 작성하세요.",
      "points": 13,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "int[] numbers = {1, 2, 3};",
      "keywords": [
        "int[]",
        "numbers",
        "1",
        "2",
        "3"
      ]
    },
    {
      "id": "java_sa_basic_07",
      "category": "Java",
      "type": "주관식",
      "difficulty": "초급",
      "question": "Java에서 while문을 사용하여 1부터 3까지 출력하는 코드를 작성하세요.",
      "points": 15,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "int i = 1; while (i <= 3) { System.out.println(i); i++; }",
      "keywords": [
        "while",
        "int",
        "i",
        "1",
        "3",
        "System.out.println"
      ]
    },
    {
      "id": "java_sa_basic_08",
      "category": "Java",
      "type": "주관식",
      "difficulty": "초급",
      "question": "Java에서 두 정수 a와 b를 더하는 메서드 add를 작성하세요.",
      "points": 17,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "public int add(int a, int b) { return a + b; }",
      "keywords": [
        "public",
        "int",
        "add",
        "a",
        "b",
        "return",
        "+"
      ]
    },
    {
      "id": "java_sa_basic_09",
      "category": "Java",
      "type": "주관식",
      "difficulty": "초급",
      "question": "Java에서 클래스 Student를 정의하는 코드를 작성하세요.",
      "points": 14,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "public class Student { }",
      "keywords": [
        "public",
        "class",
        "Student"
      ]
    },
    {
      "id": "java_sa_basic_10",
      "category": "Java",
      "type": "주관식",
      "difficulty": "초급",
      "question": "Java에서 문자열 str1과 str2를 연결하는 코드를 작성하세요.",
      "points": 12,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "String result = str1 + str2;",
      "keywords": [
        "String",
        "result",
        "str1",
        "str2",
        "+"
      ]
    },
    {
      "id": "java_sa_inter_01",
      "category": "Java",
      "type": "주관식",
      "difficulty": "중급",
      "question": "Java에서 제네릭을 사용하여 ArrayList<String>을 선언하는 코드를 작성하세요.",
      "points": 18,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "ArrayList<String> list = new ArrayList<String>();",
      "keywords": [
        "ArrayList",
        "String",
        "new",
        "list"
      ]
    },
    {
      "id": "java_sa_inter_02",
      "category": "Java",
      "type": "주관식",
      "difficulty": "중급",
      "question": "Java에서 인터페이스 Printable을 정의하고 print 메서드를 선언하는 코드를 작성하세요.",
      "points": 20,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "public interface Printable { void print(); }",
      "keywords": [
        "public",
        "interface",
        "Printable",
        "void",
        "print"
      ]
    },
    {
      "id": "java_sa_inter_03",
      "category": "Java",
      "type": "주관식",
      "difficulty": "중급",
      "question": "Java에서 try-catch 문을 사용하여 예외를 처리하는 코드를 작성하세요.",
      "points": 19,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "try { // 코드 } catch (Exception e) { // 예외 처리 }",
      "keywords": [
        "try",
        "catch",
        "Exception",
        "e"
      ]
    },
    {
      "id": "java_sa_inter_04",
      "category": "Java",
      "type": "주관식",
      "difficulty": "중급",
      "question": "Java에서 람다 표현식을 사용하여 리스트의 각 요소를 출력하는 코드를 작성하세요.",
      "points": 21,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "list.forEach(item -> System.out.println(item));",
      "keywords": [
        "list",
        "forEach",
        "item",
        "System.out.println"
      ]
    },
    {
      "id": "java_sa_inter_05",
      "category": "Java",
      "type": "주관식",
      "difficulty": "중급",
      "question": "Java에서 Stream을 사용하여 숫자 리스트에서 짝수만 필터링하는 코드를 작성하세요.",
      "points": 20,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "numbers.stream().filter(n -> n % 2 == 0).collect(Collectors.toList());",
      "keywords": [
        "numbers",
        "stream",
        "filter",
        "n",
        "%",
        "2",
        "collect",
        "Collectors.toList"
      ]
    },
    {
      "id": "java_sa_inter_06",
      "category": "Java",
      "type": "주관식",
      "difficulty": "중급",
      "question": "Java에서 Optional을 사용하여 null 체크를 하는 코드를 작성하세요.",
      "points": 18,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "Optional.ofNullable(value).orElse(\"기본값\");",
      "keywords": [
        "Optional",
        "ofNullable",
        "value",
        "orElse",
        "기본값"
      ]
    },
    {
      "id": "java_sa_inter_07",
      "category": "Java",
      "type": "주관식",
      "difficulty": "중급",
      "question": "Java에서 enum을 정의하고 상수를 선언하는 코드를 작성하세요.",
      "points": 17,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "public enum Color { RED, GREEN, BLUE }",
      "keywords": [
        "public",
        "enum",
        "Color",
        "RED",
        "GREEN",
        "BLUE"
      ]
    },
    {
      "id": "java_sa_inter_08",
      "category": "Java",
      "type": "주관식",
      "difficulty": "중급",
      "question": "Java에서 synchronized 메서드를 정의하는 코드를 작성하세요.",
      "points": 19,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "public synchronized void method() { // 메서드 내용 }",
      "keywords": [
        "public",
        "synchronized",
        "void",
        "method"
      ]
    },
    {
      "id": "java_sa_inter_09",
      "category": "Java",
      "type": "주관식",
      "difficulty": "중급",
      "question": "Java에서 내부 클래스(Inner Class)를 정의하는 코드를 작성하세요.",
      "points": 20,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "class Outer { class Inner { } }",
      "keywords": [
        "class",
        "Outer",
        "Inner"
      ]
    },
    {
      "id": "java_sa_inter_10",
      "category": "Java",
      "type": "주관식",
      "difficulty": "중급",
      "question": "Java에서 애노테이션을 정의하는 코드를 작성하세요.",
      "points": 22,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "@interface MyAnnotation { String value(); }",
      "keywords": [
        "@interface",
        "MyAnnotation",
        "String",
        "value"
      ]
    },
    {
      "id": "db_mc_basic_01",
      "category": "Database",
      "type": "객관식",
      "difficulty": "초급",
      "question": "데이터베이스에서 데이터를 조회할 때 사용하는 SQL 명령어는?",
      "points": 10,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "SELECT",
        "INSERT",
        "UPDATE",
        "DELETE"
      ],
      "correct_answer": "SELECT"
    },
    {
      "id": "db_mc_basic_02",
      "category": "Database",
      "type": "객관식",
      "difficulty": "초급",
      "question": "데이터베이스에서 새로운 데이터를 추가할 때 사용하는 SQL 명령어는?",
      "points": 11,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "SELECT",
        "INSERT",
        "UPDATE",
        "DELETE"
      ],
      "correct_answer": "INSERT"
    },
    {
      "id": "db_mc_basic_03",
      "category": "Database",
      "type": "객관식",
      "difficulty": "초급",
      "question": "데이터베이스에서 기존 데이터를 수정할 때 사용하는 SQL 명령어는?",
      "points": 12,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "SELECT",
        "INSERT",
        "UPDATE",
        "DELETE"
      ],
      "correct_answer": "UPDATE"
    },
    {
      "id": "db_mc_basic_04",
      "category": "Database",
      "type": "객관식",
      "difficulty": "초급",
      "question": "데이터베이스에서 데이터를 삭제할 때 사용하는 SQL 명령어는?",
      "points": 10,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "SELECT",
        "INSERT",
        "UPDATE",
        "DELETE"
      ],
      "correct_answer": "DELETE"
    },
    {
      "id": "db_mc_basic_05",
      "category": "Database",
      "type": "객관식",
      "difficulty": "초급",
      "question": "SQL에서 조건을 지정할 때 사용하는 절은?",
      "points": 11,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "WHERE",
        "FROM",
        "SELECT",
        "ORDER BY"
      ],
      "correct_answer": "WHERE"
    },
    {
      "id": "db_mc_basic_06",
      "category": "Database",
      "type": "객관식",
      "difficulty": "초급",
      "question": "SQL에서 결과를 정렬할 때 사용하는 절은?",
      "points": 9,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "WHERE",
        "FROM",
        "SELECT",
        "ORDER BY"
      ],
      "correct_answer": "ORDER BY"
    },
    {
      "id": "db_mc_basic_07",
      "category": "Database",
      "type": "객관식",
      "difficulty": "초급",
      "question": "데이터베이스에서 중복된 데이터를 제거할 때 사용하는 키워드는?",
      "points": 12,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "UNIQUE",
        "DISTINCT",
        "DIFFERENT",
        "SINGLE"
      ],
      "correct_answer": "DISTINCT"
    },
    {
      "id": "db_mc_basic_08",
      "category": "Database",
      "type": "객관식",
      "difficulty": "초급",
      "question": "SQL에서 두 개 이상의 테이블을 연결할 때 사용하는 절은?",
      "points": 13,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "WHERE",
        "JOIN",
        "CONNECT",
        "LINK"
      ],
      "correct_answer": "JOIN"
    },
    {
      "id": "db_mc_basic_09",
      "category": "Database",
      "type": "객관식",
      "difficulty": "초급",
      "question": "데이터베이스에서 그룹화할 때 사용하는 절은?",
      "points": 11,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "WHERE",
        "HAVING",
        "GROUP BY",
        "ORDER BY"
      ],
      "correct_answer": "GROUP BY"
    },
    {
      "id": "db_mc_basic_10",
      "category": "Database",
      "type": "객관식",
      "difficulty": "초급",
      "question": "SQL에서 집계 함수가 아닌 것은?",
      "points": 10,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "COUNT",
        "SUM",
        "AVG",
        "SELECT"
      ],
      "correct_answer": "SELECT"
    },
    {
      "id": "db_mc_basic_11",
      "category": "Database",
      "type": "객관식",
      "difficulty": "초급",
      "question": "SQL에서 레코드 수를 세는 집계 함수는?",
      "points": 11,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "COUNT",
        "SUM",
        "AVG",
        "MAX"
      ],
      "correct_answer": "COUNT"
    },
    {
      "id": "db_mc_basic_12",
      "category": "Database",
      "type": "객관식",
      "difficulty": "초급",
      "question": "SQL에서 합계를 구하는 집계 함수는?",
      "points": 10,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "COUNT",
        "SUM",
        "AVG",
        "MAX"
      ],
      "correct_answer": "SUM"
    },
    {
      "id": "db_mc_basic_13",
      "category": "Database",
      "type": "객관식",
      "difficulty": "초급",
      "question": "SQL에서 평균을 구하는 집계 함수는?",
      "points": 11,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "COUNT",
        "SUM",
        "AVG",
        "MAX"
      ],
      "correct_answer": "AVG"
    },
    {
      "id": "db_mc_basic_14",
      "category": "Database",
      "type": "객관식",
      "difficulty": "초급",
      "question": "SQL에서 최대값을 구하는 집계 함수는?",
      "points": 10,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "COUNT",
        "SUM",
        "AVG",
        "MAX"
      ],
      "correct_answer": "MAX"
    },
    {
      "id": "db_mc_basic_15",
      "category": "Database",
      "type": "객관식",
      "difficulty": "초급",
      "question": "SQL에서 최소값을 구하는 집계 함수는?",
      "points": 10,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "COUNT",
        "SUM",
        "AVG",
        "MIN"
      ],
      "correct_answer": "MIN"
    },
    {
      "id": "db_mc_basic_16",
      "category": "Database",
      "type": "객관식",
      "difficulty": "초급",
      "question": "SQL에서 내림차순 정렬을 할 때 사용하는 키워드는?",
      "points": 12,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "ASC",
        "DESC",
        "DOWN",
        "REVERSE"
      ],
      "correct_answer": "DESC"
    },
    {
      "id": "db_mc_basic_17",
      "category": "Database",
      "type": "객관식",
      "difficulty": "초급",
      "question": "SQL에서 오름차순 정렬을 할 때 사용하는 키워드는?",
      "points": 11,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "ASC",
        "DESC",
        "UP",
        "FORWARD"
      ],
      "correct_answer": "ASC"
    },
    {
      "id": "db_mc_basic_18",
      "category": "Database",
      "type": "객관식",
      "difficulty": "초급",
      "question": "SQL에서 특정 개수의 레코드만 조회할 때 사용하는 절은?",
      "points": 13,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "LIMIT",
        "TOP",
        "FIRST",
        "ROWS"
      ],
      "correct_answer": "LIMIT"
    },
    {
      "id": "db_mc_basic_19",
      "category": "Database",
      "type": "객관식",
      "difficulty": "초급",
      "question": "SQL에서 패턴 매칭을 할 때 사용하는 연산자는?",
      "points": 12,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "LIKE",
        "MATCH",
        "PATTERN",
        "SIMILAR"
      ],
      "correct_answer": "LIKE"
    },
    {
      "id": "db_mc_basic_20",
      "category": "Database",
      "type": "객관식",
      "difficulty": "초급",
      "question": "SQL에서 NULL 값을 체크할 때 사용하는 연산자는?",
      "points": 11,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "IS NULL",
        "= NULL",
        "NULL",
        "HAS NULL"
      ],
      "correct_answer": "IS NULL"
    },
    {
      "id": "db_mc_inter_01",
      "category": "Database",
      "type": "객관식",
      "difficulty": "중급",
      "question": "SQL에서 INNER JOIN과 OUTER JOIN의 차이점은?",
      "points": 15,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "INNER JOIN은 교집합, OUTER JOIN은 합집합",
        "INNER JOIN은 합집합, OUTER JOIN은 교집합",
        "INNER JOIN은 차집합, OUTER JOIN은 교집합",
        "INNER JOIN은 교집합, OUTER JOIN은 차집합"
      ],
      "correct_answer": "INNER JOIN은 교집합, OUTER JOIN은 합집합"
    },
    {
      "id": "db_mc_inter_02",
      "category": "Database",
      "type": "객관식",
      "difficulty": "중급",
      "question": "SQL에서 서브쿼리의 장점은?",
      "points": 14,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "코드 재사용성",
        "실행 속도 향상",
        "메모리 절약",
        "타입 안전성"
      ],
      "correct_answer": "코드 재사용성"
    },
    {
      "id": "db_mc_inter_03",
      "category": "Database",
      "type": "객관식",
      "difficulty": "중급",
      "question": "SQL에서 인덱스의 주요 목적은?",
      "points": 16,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "검색 속도 향상",
        "저장 공간 절약",
        "데이터 무결성",
        "백업 용이성"
      ],
      "correct_answer": "검색 속도 향상"
    },
    {
      "id": "db_mc_inter_04",
      "category": "Database",
      "type": "객관식",
      "difficulty": "중급",
      "question": "SQL에서 트랜잭션의 ACID 속성이 아닌 것은?",
      "points": 15,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "Atomicity",
        "Consistency",
        "Isolation",
        "Durability",
        "Availability"
      ],
      "correct_answer": "Availability"
    },
    {
      "id": "db_mc_inter_05",
      "category": "Database",
      "type": "객관식",
      "difficulty": "중급",
      "question": "SQL에서 뷰(View)의 장점은?",
      "points": 13,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "데이터 보안",
        "메모리 절약",
        "실행 속도 향상",
        "타입 안전성"
      ],
      "correct_answer": "데이터 보안"
    },
    {
      "id": "db_mc_inter_06",
      "category": "Database",
      "type": "객관식",
      "difficulty": "중급",
      "question": "SQL에서 저장 프로시저(Stored Procedure)의 장점은?",
      "points": 14,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "성능 향상",
        "메모리 절약",
        "코드 간소화",
        "타입 안전성"
      ],
      "correct_answer": "성능 향상"
    },
    {
      "id": "db_mc_inter_07",
      "category": "Database",
      "type": "객관식",
      "difficulty": "중급",
      "question": "SQL에서 정규화의 목적은?",
      "points": 15,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "데이터 중복 제거",
        "검색 속도 향상",
        "저장 공간 절약",
        "백업 용이성"
      ],
      "correct_answer": "데이터 중복 제거"
    },
    {
      "id": "db_mc_inter_08",
      "category": "Database",
      "type": "객관식",
      "difficulty": "중급",
      "question": "SQL에서 데드락(Deadlock)을 방지하는 방법은?",
      "points": 16,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "트랜잭션 순서 통일",
        "메모리 증가",
        "CPU 성능 향상",
        "네트워크 속도 개선"
      ],
      "correct_answer": "트랜잭션 순서 통일"
    },
    {
      "id": "db_mc_inter_09",
      "category": "Database",
      "type": "객관식",
      "difficulty": "중급",
      "question": "SQL에서 커서(Cursor)의 용도는?",
      "points": 14,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "레코드 단위 처리",
        "메모리 절약",
        "실행 속도 향상",
        "타입 안전성"
      ],
      "correct_answer": "레코드 단위 처리"
    },
    {
      "id": "db_mc_inter_10",
      "category": "Database",
      "type": "객관식",
      "difficulty": "중급",
      "question": "SQL에서 트리거(Trigger)의 역할은?",
      "points": 15,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "자동 이벤트 처리",
        "메모리 관리",
        "성능 최적화",
        "백업 자동화"
      ],
      "correct_answer": "자동 이벤트 처리"
    },
    {
      "id": "db_mc_inter_11",
      "category": "Database",
      "type": "객관식",
      "difficulty": "중급",
      "question": "SQL에서 윈도우 함수(Window Function)의 특징은?",
      "points": 16,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "집계 결과를 각 행에 표시",
        "메모리 절약",
        "실행 속도 향상",
        "타입 안전성"
      ],
      "correct_answer": "집계 결과를 각 행에 표시"
    },
    {
      "id": "db_mc_inter_12",
      "category": "Database",
      "type": "객관식",
      "difficulty": "중급",
      "question": "SQL에서 CTE(Common Table Expression)의 장점은?",
      "points": 14,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "쿼리 가독성 향상",
        "메모리 절약",
        "실행 속도 향상",
        "타입 안전성"
      ],
      "correct_answer": "쿼리 가독성 향상"
    },
    {
      "id": "db_mc_inter_13",
      "category": "Database",
      "type": "객관식",
      "difficulty": "중급",
      "question": "SQL에서 UNION과 UNION ALL의 차이점은?",
      "points": 15,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "UNION은 중복 제거, UNION ALL은 중복 허용",
        "UNION은 중복 허용, UNION ALL은 중복 제거",
        "UNION은 정렬, UNION ALL은 정렬 안함",
        "UNION은 빠름, UNION ALL은 느림"
      ],
      "correct_answer": "UNION은 중복 제거, UNION ALL은 중복 허용"
    },
    {
      "id": "db_mc_inter_14",
      "category": "Database",
      "type": "객관식",
      "difficulty": "중급",
      "question": "SQL에서 EXISTS와 IN의 차이점은?",
      "points": 16,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "EXISTS는 성능이 더 좋음",
        "IN은 성능이 더 좋음",
        "EXISTS는 NULL 처리 불가",
        "IN은 서브쿼리 불가"
      ],
      "correct_answer": "EXISTS는 성능이 더 좋음"
    },
    {
      "id": "db_mc_inter_15",
      "category": "Database",
      "type": "객관식",
      "difficulty": "중급",
      "question": "SQL에서 CASE 문의 용도는?",
      "points": 13,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "조건부 데이터 변환",
        "메모리 절약",
        "실행 속도 향상",
        "타입 안전성"
      ],
      "correct_answer": "조건부 데이터 변환"
    },
    {
      "id": "db_mc_inter_16",
      "category": "Database",
      "type": "객관식",
      "difficulty": "중급",
      "question": "SQL에서 PIVOT의 역할은?",
      "points": 15,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "행을 열로 변환",
        "열을 행으로 변환",
        "데이터 정렬",
        "데이터 필터링"
      ],
      "correct_answer": "행을 열로 변환"
    },
    {
      "id": "db_mc_inter_17",
      "category": "Database",
      "type": "객관식",
      "difficulty": "중급",
      "question": "SQL에서 UNPIVOT의 역할은?",
      "points": 14,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "열을 행으로 변환",
        "행을 열로 변환",
        "데이터 정렬",
        "데이터 필터링"
      ],
      "correct_answer": "열을 행으로 변환"
    },
    {
      "id": "db_mc_inter_18",
      "category": "Database",
      "type": "객관식",
      "difficulty": "중급",
      "question": "SQL에서 ROW_NUMBER() 함수의 용도는?",
      "points": 15,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "순차 번호 부여",
        "집계 계산",
        "데이터 정렬",
        "데이터 필터링"
      ],
      "correct_answer": "순차 번호 부여"
    },
    {
      "id": "db_mc_inter_19",
      "category": "Database",
      "type": "객관식",
      "difficulty": "중급",
      "question": "SQL에서 LAG() 함수의 용도는?",
      "points": 16,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "이전 행 값 참조",
        "다음 행 값 참조",
        "집계 계산",
        "데이터 정렬"
      ],
      "correct_answer": "이전 행 값 참조"
    },
    {
      "id": "db_mc_inter_20",
      "category": "Database",
      "type": "객관식",
      "difficulty": "중급",
      "question": "SQL에서 LEAD() 함수의 용도는?",
      "points": 15,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "다음 행 값 참조",
        "이전 행 값 참조",
        "집계 계산",
        "데이터 정렬"
      ],
      "correct_answer": "다음 행 값 참조"
    },
    {
      "id": "db_sa_basic_01",
      "category": "Database",
      "type": "주관식",
      "difficulty": "초급",
      "question": "employees 테이블에서 모든 직원의 이름을 조회하는 SQL문을 작성하세요.",
      "points": 15,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "SELECT name FROM employees;",
      "keywords": [
        "SELECT",
        "name",
        "FROM",
        "employees"
      ]
    },
    {
      "id": "db_sa_basic_02",
      "category": "Database",
      "type": "주관식",
      "difficulty": "초급",
      "question": "employees 테이블에서 부서가 'IT'인 직원들의 이름을 조회하는 SQL문을 작성하세요.",
      "points": 16,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "SELECT name FROM employees WHERE department = 'IT';",
      "keywords": [
        "SELECT",
        "name",
        "FROM",
        "employees",
        "WHERE",
        "department",
        "IT"
      ]
    },
    {
      "id": "db_sa_basic_03",
      "category": "Database",
      "type": "주관식",
      "difficulty": "초급",
      "question": "employees 테이블에 새로운 직원 정보를 추가하는 SQL문을 작성하세요. (이름: '홍길동', 부서: 'HR')",
      "points": 17,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "INSERT INTO employees (name, department) VALUES ('홍길동', 'HR');",
      "keywords": [
        "INSERT",
        "INTO",
        "employees",
        "name",
        "department",
        "VALUES",
        "홍길동",
        "HR"
      ]
    },
    {
      "id": "db_sa_basic_04",
      "category": "Database",
      "type": "주관식",
      "difficulty": "초급",
      "question": "employees 테이블에서 이름이 '홍길동'인 직원의 부서를 'IT'로 변경하는 SQL문을 작성하세요.",
      "points": 18,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "UPDATE employees SET department = 'IT' WHERE name = '홍길동';",
      "keywords": [
        "UPDATE",
        "employees",
        "SET",
        "department",
        "IT",
        "WHERE",
        "name",
        "홍길동"
      ]
    },
    {
      "id": "db_sa_basic_05",
      "category": "Database",
      "type": "주관식",
      "difficulty": "초급",
      "question": "employees 테이블에서 이름이 '홍길동'인 직원을 삭제하는 SQL문을 작성하세요.",
      "points": 16,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "DELETE FROM employees WHERE name = '홍길동';",
      "keywords": [
        "DELETE",
        "FROM",
        "employees",
        "WHERE",
        "name",
        "홍길동"
      ]
    },
    {
      "id": "db_sa_basic_06",
      "category": "Database",
      "type": "주관식",
      "difficulty": "초급",
      "question": "employees 테이블에서 직원 수를 세는 SQL문을 작성하세요.",
      "points": 14,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "SELECT COUNT(*) FROM employees;",
      "keywords": [
        "SELECT",
        "COUNT",
        "*",
        "FROM",
        "employees"
      ]
    },
    {
      "id": "db_sa_basic_07",
      "category": "Database",
      "type": "주관식",
      "difficulty": "초급",
      "question": "employees 테이블에서 부서별 직원 수를 조회하는 SQL문을 작성하세요.",
      "points": 17,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "SELECT department, COUNT(*) FROM employees GROUP BY department;",
      "keywords": [
        "SELECT",
        "department",
        "COUNT",
        "*",
        "FROM",
        "employees",
        "GROUP BY"
      ]
    },
    {
      "id": "db_sa_basic_08",
      "category": "Database",
      "type": "주관식",
      "difficulty": "초급",
      "question": "employees 테이블에서 이름을 오름차순으로 정렬하여 조회하는 SQL문을 작성하세요.",
      "points": 15,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "SELECT * FROM employees ORDER BY name ASC;",
      "keywords": [
        "SELECT",
        "*",
        "FROM",
        "employees",
        "ORDER BY",
        "name",
        "ASC"
      ]
    },
    {
      "id": "db_sa_basic_09",
      "category": "Database",
      "type": "주관식",
      "difficulty": "초급",
      "question": "employees 테이블에서 중복되지 않는 부서 목록을 조회하는 SQL문을 작성하세요.",
      "points": 16,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "SELECT DISTINCT department FROM employees;",
      "keywords": [
        "SELECT",
        "DISTINCT",
        "department",
        "FROM",
        "employees"
      ]
    },
    {
      "id": "db_sa_basic_10",
      "category": "Database",
      "type": "주관식",
      "difficulty": "초급",
      "question": "employees 테이블에서 이름에 '김'이 포함된 직원들을 조회하는 SQL문을 작성하세요.",
      "points": 16,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "SELECT * FROM employees WHERE name LIKE '%김%';",
      "keywords": [
        "SELECT",
        "*",
        "FROM",
        "employees",
        "WHERE",
        "name",
        "LIKE",
        "%김%"
      ]
    },
    {
      "id": "db_sa_inter_01",
      "category": "Database",
      "type": "주관식",
      "difficulty": "중급",
      "question": "employees와 departments 테이블을 INNER JOIN하여 직원 이름과 부서명을 조회하는 SQL문을 작성하세요.",
      "points": 20,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "SELECT e.name, d.department_name FROM employees e INNER JOIN departments d ON e.dept_id = d.id;",
      "keywords": [
        "SELECT",
        "e.name",
        "d.department_name",
        "FROM",
        "employees",
        "e",
        "INNER JOIN",
        "departments",
        "d",
        "ON",
        "e.dept_id",
        "d.id"
      ]
    },
    {
      "id": "db_sa_inter_02",
      "category": "Database",
      "type": "주관식",
      "difficulty": "중급",
      "question": "employees 테이블에서 부서별 평균 급여를 조회하는 SQL문을 작성하세요.",
      "points": 18,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "SELECT department, AVG(salary) FROM employees GROUP BY department;",
      "keywords": [
        "SELECT",
        "department",
        "AVG",
        "salary",
        "FROM",
        "employees",
        "GROUP BY"
      ]
    },
    {
      "id": "db_sa_inter_03",
      "category": "Database",
      "type": "주관식",
      "difficulty": "중급",
      "question": "employees 테이블에서 급여가 평균 급여보다 높은 직원들을 조회하는 서브쿼리를 사용한 SQL문을 작성하세요.",
      "points": 22,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "SELECT * FROM employees WHERE salary > (SELECT AVG(salary) FROM employees);",
      "keywords": [
        "SELECT",
        "*",
        "FROM",
        "employees",
        "WHERE",
        "salary",
        ">",
        "SELECT",
        "AVG",
        "salary",
        "FROM",
        "employees"
      ]
    },
    {
      "id": "db_sa_inter_04",
      "category": "Database",
      "type": "주관식",
      "difficulty": "중급",
      "question": "employees 테이블에서 부서별 최고 급여를 받는 직원들을 조회하는 SQL문을 작성하세요.",
      "points": 21,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "SELECT * FROM employees e1 WHERE salary = (SELECT MAX(salary) FROM employees e2 WHERE e1.department = e2.department);",
      "keywords": [
        "SELECT",
        "*",
        "FROM",
        "employees",
        "e1",
        "WHERE",
        "salary",
        "=",
        "SELECT",
        "MAX",
        "salary",
        "FROM",
        "employees",
        "e2",
        "WHERE",
        "e1.department",
        "e2.department"
      ]
    },
    {
      "id": "db_sa_inter_05",
      "category": "Database",
      "type": "주관식",
      "difficulty": "중급",
      "question": "employees 테이블에서 급여 순위를 매기는 ROW_NUMBER() 함수를 사용한 SQL문을 작성하세요.",
      "points": 19,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "SELECT name, salary, ROW_NUMBER() OVER (ORDER BY salary DESC) as rank FROM employees;",
      "keywords": [
        "SELECT",
        "name",
        "salary",
        "ROW_NUMBER",
        "OVER",
        "ORDER BY",
        "salary",
        "DESC",
        "as",
        "rank",
        "FROM",
        "employees"
      ]
    },
    {
      "id": "db_sa_inter_06",
      "category": "Database",
      "type": "주관식",
      "difficulty": "중급",
      "question": "employees 테이블에서 부서별로 급여 순위를 매기는 SQL문을 작성하세요.",
      "points": 20,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "SELECT name, department, salary, ROW_NUMBER() OVER (PARTITION BY department ORDER BY salary DESC) as dept_rank FROM employees;",
      "keywords": [
        "SELECT",
        "name",
        "department",
        "salary",
        "ROW_NUMBER",
        "OVER",
        "PARTITION BY",
        "department",
        "ORDER BY",
        "salary",
        "DESC",
        "as",
        "dept_rank",
        "FROM",
        "employees"
      ]
    },
    {
      "id": "db_sa_inter_07",
      "category": "Database",
      "type": "주관식",
      "difficulty": "중급",
      "question": "employees 테이블에서 급여가 NULL이 아닌 직원들의 급여 합계를 조회하는 SQL문을 작성하세요.",
      "points": 17,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "SELECT SUM(salary) FROM employees WHERE salary IS NOT NULL;",
      "keywords": [
        "SELECT",
        "SUM",
        "salary",
        "FROM",
        "employees",
        "WHERE",
        "salary",
        "IS NOT NULL"
      ]
    },
    {
      "id": "db_sa_inter_08",
      "category": "Database",
      "type": "주관식",
      "difficulty": "중급",
      "question": "employees 테이블에서 부서별 직원 수가 3명 이상인 부서만 조회하는 HAVING 절을 사용한 SQL문을 작성하세요.",
      "points": 21,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "SELECT department, COUNT(*) FROM employees GROUP BY department HAVING COUNT(*) >= 3;",
      "keywords": [
        "SELECT",
        "department",
        "COUNT",
        "*",
        "FROM",
        "employees",
        "GROUP BY",
        "department",
        "HAVING",
        "COUNT",
        "*",
        ">=",
        "3"
      ]
    },
    {
      "id": "db_sa_inter_09",
      "category": "Database",
      "type": "주관식",
      "difficulty": "중급",
      "question": "employees 테이블에서 급여 범위별로 직원 수를 조회하는 CASE 문을 사용한 SQL문을 작성하세요.",
      "points": 23,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "SELECT CASE WHEN salary < 3000 THEN 'Low' WHEN salary < 5000 THEN 'Medium' ELSE 'High' END as salary_range, COUNT(*) FROM employees GROUP BY salary_range;",
      "keywords": [
        "SELECT",
        "CASE",
        "WHEN",
        "salary",
        "<",
        "3000",
        "THEN",
        "Low",
        "WHEN",
        "salary",
        "<",
        "5000",
        "THEN",
        "Medium",
        "ELSE",
        "High",
        "END",
        "as",
        "salary_range",
        "COUNT",
        "*",
        "FROM",
        "employees",
        "GROUP BY",
        "salary_range"
      ]
    },
    {
      "id": "db_sa_inter_10",
      "category": "Database",
      "type": "주관식",
      "difficulty": "중급",
      "question": "employees 테이블에서 상위 5명의 급여를 조회하는 LIMIT을 사용한 SQL문을 작성하세요.",
      "points": 18,
      "department_ids": [
        "dept_1"
      ],
      "correct_answer": "SELECT name, salary FROM employees ORDER BY salary DESC LIMIT 5;",
      "keywords": [
        "SELECT",
        "name",
        "salary",
        "FROM",
        "employees",
        "ORDER BY",
        "salary",
        "DESC",
        "LIMIT",
        "5"
      ]
    }
  ],
  "problem_solving_questions": [
    {
      "id": "ps_mc_basic_01",
      "category": "문제해결",
      "type": "객관식",
      "difficulty": "초급",
      "question": "프로그램에서 오류가 발생했을 때 가장 먼저 해야 할 일은?",
      "points": 12,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "오류 메시지 확인",
        "코드 전체 삭제",
        "컴퓨터 재시작",
        "다른 프로그램 실행"
      ],
      "correct_answer": "오류 메시지 확인"
    },
    {
      "id": "ps_mc_basic_02",
      "category": "문제해결",
      "type": "객관식",
      "difficulty": "초급",
      "question": "코드가 예상과 다르게 동작할 때 가장 효과적인 디버깅 방법은?",
      "points": 14,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "print 문 사용",
        "코드 무시",
        "다른 언어 사용",
        "프로그램 종료"
      ],
      "correct_answer": "print 문 사용"
    },
    {
      "id": "ps_mc_basic_03",
      "category": "문제해결",
      "type": "객관식",
      "difficulty": "초급",
      "question": "프로그램 성능이 느릴 때 개선할 수 있는 방법은?",
      "points": 13,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "불필요한 반복문 제거",
        "코드 전체 삭제",
        "컴퓨터 교체",
        "프로그램 중단"
      ],
      "correct_answer": "불필요한 반복문 제거"
    },
    {
      "id": "ps_mc_basic_04",
      "category": "문제해결",
      "type": "객관식",
      "difficulty": "초급",
      "question": "메모리 사용량이 많을 때 해결 방법은?",
      "points": 11,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "사용하지 않는 변수 정리",
        "모든 변수 삭제",
        "메모리 추가 설치",
        "프로그램 종료"
      ],
      "correct_answer": "사용하지 않는 변수 정리"
    },
    {
      "id": "ps_mc_basic_05",
      "category": "문제해결",
      "type": "객관식",
      "difficulty": "초급",
      "question": "사용자 입력값 검증이 필요한 이유는?",
      "points": 15,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "보안 강화",
        "코드 간소화",
        "실행 속도 향상",
        "메모리 절약"
      ],
      "correct_answer": "보안 강화"
    },
    {
      "id": "ps_mc_basic_06",
      "category": "문제해결",
      "type": "객관식",
      "difficulty": "초급",
      "question": "데이터베이스 연결이 실패할 때 확인해야 할 사항은?",
      "points": 12,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "연결 정보 확인",
        "컴퓨터 재시작",
        "데이터베이스 삭제",
        "네트워크 차단"
      ],
      "correct_answer": "연결 정보 확인"
    },
    {
      "id": "ps_mc_basic_07",
      "category": "문제해결",
      "type": "객관식",
      "difficulty": "초급",
      "question": "파일을 읽을 수 없을 때 가장 먼저 확인할 것은?",
      "points": 10,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "파일 경로 확인",
        "파일 삭제",
        "폴더 삭제",
        "컴퓨터 재시작"
      ],
      "correct_answer": "파일 경로 확인"
    },
    {
      "id": "ps_mc_basic_08",
      "category": "문제해결",
      "type": "객관식",
      "difficulty": "초급",
      "question": "네트워크 요청이 실패할 때 확인해야 할 것은?",
      "points": 13,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "인터넷 연결 상태",
        "컴퓨터 성능",
        "프로그램 종료",
        "모니터 교체"
      ],
      "correct_answer": "인터넷 연결 상태"
    },
    {
      "id": "ps_mc_basic_09",
      "category": "문제해결",
      "type": "객관식",
      "difficulty": "초급",
      "question": "코드에서 중복된 부분이 많을 때 개선 방법은?",
      "points": 14,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "함수로 분리",
        "코드 삭제",
        "변수 추가",
        "주석 추가"
      ],
      "correct_answer": "함수로 분리"
    },
    {
      "id": "ps_mc_basic_10",
      "category": "문제해결",
      "type": "객관식",
      "difficulty": "초급",
      "question": "프로그램이 예상보다 많은 시간이 걸릴 때 개선 방법은?",
      "points": 12,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "알고리즘 최적화",
        "코드 삭제",
        "컴퓨터 교체",
        "프로그램 중단"
      ],
      "correct_answer": "알고리즘 최적화"
    },
    {
      "id": "ps_mc_inter_01",
      "category": "문제해결",
      "type": "객관식",
      "difficulty": "중급",
      "question": "시스템에서 메모리 누수가 발생했을 때 가장 효과적인 해결 방법은?",
      "points": 16,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "메모리 프로파일링 도구 사용",
        "컴퓨터 재시작",
        "메모리 추가 설치",
        "프로그램 종료"
      ],
      "correct_answer": "메모리 프로파일링 도구 사용"
    },
    {
      "id": "ps_mc_inter_02",
      "category": "문제해결",
      "type": "객관식",
      "difficulty": "중급",
      "question": "데이터베이스 쿼리 성능이 느릴 때 개선 방법은?",
      "points": 15,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "인덱스 최적화",
        "테이블 삭제",
        "데이터베이스 교체",
        "쿼리 무시"
      ],
      "correct_answer": "인덱스 최적화"
    },
    {
      "id": "ps_mc_inter_03",
      "category": "문제해결",
      "type": "객관식",
      "difficulty": "중급",
      "question": "멀티스레드 환경에서 데드락을 방지하는 방법은?",
      "points": 17,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "락 순서 통일",
        "스레드 수 감소",
        "메모리 증가",
        "CPU 성능 향상"
      ],
      "correct_answer": "락 순서 통일"
    },
    {
      "id": "ps_mc_inter_04",
      "category": "문제해결",
      "type": "객관식",
      "difficulty": "중급",
      "question": "네트워크 통신에서 타임아웃이 자주 발생할 때 해결 방법은?",
      "points": 14,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "재시도 로직 구현",
        "네트워크 차단",
        "서버 교체",
        "프로그램 종료"
      ],
      "correct_answer": "재시도 로직 구현"
    },
    {
      "id": "ps_mc_inter_05",
      "category": "문제해결",
      "type": "객관식",
      "difficulty": "중급",
      "question": "대용량 데이터 처리 시 메모리 부족 문제를 해결하는 방법은?",
      "points": 16,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "스트리밍 처리",
        "데이터 삭제",
        "메모리 추가",
        "프로그램 중단"
      ],
      "correct_answer": "스트리밍 처리"
    },
    {
      "id": "ps_mc_inter_06",
      "category": "문제해결",
      "type": "객관식",
      "difficulty": "중급",
      "question": "시스템 로그가 너무 많아져서 디스크 공간이 부족할 때 해결 방법은?",
      "points": 15,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "로그 로테이션 설정",
        "로그 무시",
        "디스크 교체",
        "시스템 종료"
      ],
      "correct_answer": "로그 로테이션 설정"
    },
    {
      "id": "ps_mc_inter_07",
      "category": "문제해결",
      "type": "객관식",
      "difficulty": "중급",
      "question": "API 응답 시간이 느릴 때 성능 개선 방법은?",
      "points": 16,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "캐싱 도입",
        "API 삭제",
        "서버 교체",
        "네트워크 차단"
      ],
      "correct_answer": "캐싱 도입"
    },
    {
      "id": "ps_mc_inter_08",
      "category": "문제해결",
      "type": "객관식",
      "difficulty": "중급",
      "question": "데이터베이스 연결 풀이 부족할 때 해결 방법은?",
      "points": 14,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "연결 풀 크기 조정",
        "데이터베이스 삭제",
        "서버 교체",
        "프로그램 종료"
      ],
      "correct_answer": "연결 풀 크기 조정"
    },
    {
      "id": "ps_mc_inter_09",
      "category": "문제해결",
      "type": "객관식",
      "difficulty": "중급",
      "question": "파일 업로드 시 보안을 강화하는 방법은?",
      "points": 15,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "파일 타입 검증",
        "파일 업로드 금지",
        "서버 교체",
        "네트워크 차단"
      ],
      "correct_answer": "파일 타입 검증"
    },
    {
      "id": "ps_mc_inter_10",
      "category": "문제해결",
      "type": "객관식",
      "difficulty": "중급",
      "question": "시스템에서 예외 처리가 부족할 때 개선 방법은?",
      "points": 16,
      "department_ids": [
        "dept_1"
      ],
      "options": [
        "전역 예외 핸들러 구현",
        "예외 무시",
        "코드 삭제",
        "프로그램 종료"
      ],
      "correct_answer": "전역 예외 핸들러 구현"
    }
  ]
}